name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'web-app/**'
      - '.github/workflows/CI-CD.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'web-app/**'
      - '.github/workflows/CI-CD.yml'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          cd web-app
          pip install pipenv
          pipenv install --dev

      - name: Run tests with coverage
        env:
          MONGO_CXN_STRING: mongodb://localhost:27017/
        run: |
          cd web-app
          pipenv run pytest ../web-app/test_app.py --cov=../web-app --cov-report=xml
          pipenv run coverage report -m

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push MongoDB Image
        run: |
          docker pull mongo:latest
          docker tag mongo:latest ${{ secrets.DOCKER_HUB_USERNAME }}/theonepiece:mongo-latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/theonepiece:mongo-latest

      - name: Build and Push Web App Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/theonepiece:web-app-latest ./web-app
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/theonepiece:web-app-latest

    deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Digital Ocean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            cd /var/www/theonepiece
            docker-compose down
            docker-compose pull
            docker-compose up -d
